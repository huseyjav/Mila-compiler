1) Expression parser proper (DONE IG? I FORGOT WHAT I WAS SUPPOSED TO DO)
    
2) binary operation parser (operator precedence)

3) make if else statements the pascal way: (DONE)
    no return until specified with exit
    store a variable in the function node and assign to that

4) make function forward decleration: (DONE)
    create forward decleration node
    in function body node check if the module already has the decleration with the name

5) create mutable variables

6) create while loop

7) create for loop

8) implement exit keyword (DONE)

9) fill in exit block (DONE)

remake if else (it is a mess right now) (DONE)
function after body code gen, if no terminating line has been found then insert a branching to exit

implement procedures: (DONE)
    add new variable to definition node, based on that pass get type void or int to gettype
    dont make a variable at the start when it is void
